package com.netcracker.edu.inventory.service.impl;

import com.netcracker.edu.inventory.model.Device;
import com.netcracker.edu.inventory.model.impl.*;
import com.netcracker.edu.inventory.service.DeviceService;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;

class DeviceServiceImpl implements DeviceService {

    private static Logger log = Logger.getLogger(DeviceServiceImpl.class.getName());

    @Override
    public <T extends Device> T createDeviceInstance(Class<T> clazz) {
        if(clazz == null){
            IllegalArgumentException ex = new IllegalArgumentException("Wrong class");
            log.log(Level.SEVERE,"Wrong class",ex);
            throw ex;
        }
        else{
            /*if((clazz.getSuperclass() == new Router().getClass() && clazz == new Switch().getClass()) ||
                    (clazz.getSuperclass() == new Router().getClass() && clazz == new WifiRouter().getClass())||
                    (clazz == new Router().getClass()) || clazz.getSuperclass() == new Router().getClass() )*/
            if((clazz.getSuperclass() == new Router().getClass() && clazz != new Switch().getClass() &&
                    clazz != new WifiRouter().getClass())|| (clazz == new Router().getClass())){
                Router dev = new Router();
                return (T)dev;
            }
            else if(clazz.getSuperclass() == new WifiRouter().getClass() || clazz == new WifiRouter().getClass()){
                WifiRouter dev = new WifiRouter();
                return (T)dev;
            }
            else if(clazz.getSuperclass() == new Battery().getClass() || clazz == new Battery().getClass() ){
                Battery dev = new Battery();
                return (T)dev;
            }
            else if(clazz.getSuperclass() == new Switch().getClass()  || clazz == new Switch().getClass()) {
                Switch dev = new Switch(); //<T>Switch();
                return (T)dev;
            }
        }
        return null;
    }

    public void sortByIN(Device[] devices) {
        /*Arrays.sort(devices,new SortedByIn());*/
        new SortArrayService().sortByIN(devices);
    }

    public void sortByProductionDate(Device[] devices) {
        /*Arrays.sort(devices,new SortedByPDate());*/
        new SortArrayService().sortByProductionDate(devices);
    }

    public void filtrateByType(Device[] devices, String type) {
        /*for (int i = 0; i < devices.length; i++) {
            if (devices[i] != null) {
                if ((devices[i].getType() != null && !devices[i].getType().equals((type))) || (devices[i].getType() == null && type != null)) {
                    devices[i] = null;
                }
            }
        }*/
        new FilterArrayService().filtrateByType(devices,type);
    }

    public void filtrateByManufacturer(Device[] devices, String manufacturer) {
        /*for (int i = 0; i < devices.length; i++) {
            if (devices[i] != null) {
                if ((devices[i].getManufacturer() != null && !devices[i].getManufacturer().equals((manufacturer))) || (devices[i].getManufacturer() == null && manufacturer != null)) {
                    devices[i] = null;
                }
            }
        }*/
        new FilterArrayService().filtrateByManufacturer(devices,manufacturer);
    }

    public void filtrateByModel(Device[] devices, String model) {
        /*for (int i = 0; i < devices.length; i++) {
            if (devices[i] != null) {
                if ((devices[i].getModel() != null && !devices[i].getModel().equals((model))) || (devices[i].getModel() == null && model != null)) {
                    devices[i] = null;
                }
            }
        }*/
        new FilterArrayService().filtrateByModel(devices,model);
    }

    public boolean isValidDeviceForInsertToRack(Device device) {
       /* if (device == null || device.getIn() == 0) {
            return false;
        } else {
            return true;
        }*/
       return new IODevice().isValidDeviceForInsertToRack(device);
    }


    @Override
    public boolean isValidDeviceForOutputToStream(Device device) {
        /*IOServiceImpl ser = new IOServiceImpl();
        if(ser.isValidEntityForOutputToStream(device)){
            return true;
        }
        else{
            return false;
        }*/
        return new IODevice().isValidDeviceForOutputToStream(device);
    }

    @Override
    public void outputDevice(Device device, OutputStream outputStream) throws IOException {
        /*if(isValidDeviceForOutputToStream(device)) {
            IOServiceImpl ser = new IOServiceImpl();
            ser.outputFillableEntity(device, outputStream);
        }
        else{
            DeviceValidationException ex = new DeviceValidationException("DeviceService.outputDevice", device);
            log.log(Level.SEVERE,"DeviceService.outputDevice", ex);
            throw ex;
        }*/
        new IODevice().outputDevice(device,outputStream);
    }

    @Override
    public Device inputDevice(InputStream inputStream) throws IOException, ClassNotFoundException {
        /*IOServiceImpl ser = new IOServiceImpl();
        return (Device)ser.inputFillableEntity(inputStream);*/
        return new IODevice().inputDevice(inputStream);
    }
}
